
import { ethers } from 'ethers';
import { supabase } from '@/integrations/supabase/client';
import { addNotification } from './notificationUtils';

declare global {
  interface Window {
    ethereum?: any;
  }
}

export interface TokenData {
  name: string;
  ticker: string;
  initialSupply: number;
  tokenType: string;
  description?: string;
  imageUrl?: string;
}

// Replace the old ERC20_ABI and ERC20_BYTECODE with the new ones for MemeToken
const ERC20_ABI = [
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "ticker",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "initialSupply",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	// ... (rest of the ABI you provided) ...
];

const ERC20_BYTECODE = "608060405234801561000f575f5ffd5b5060405161172c38038061172c833981810160405281019061003191906104e6565b838381600390816100429190610789565b5080600490816100529190610789565b505050610065818361006e60201b60201c565b5050505061093d565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036100de575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016100d59190610867565b60405180910390fd5b6100ef5f83836100f360201b60201c565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610143578060025f82825461013791906108ad565b92505081905550610211565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156101cc578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016101c3939291906108ef565b60405180910390fd5b8181035f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610258578060025f82825403925050819055506102a2565b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516102ff9190610924565b60405180910390a3505050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61036b82610325565b810181811067ffffffffffffffff8211171561038a57610389610335565b5b80604052505050565b5f61039c61030c565b90506103a88282610362565b919050565b5f67ffffffffffffffff8211156103c7576103c6610335565b5b6103d082610325565b9050602081019050919050565b8281835e5f83830152505050565b5f6103fd6103f8846103ad565b610393565b90508281526020810184848401111561041957610418610321565b5b6104248482856103dd565b509392505050565b5f82601f8301126104405761043f61031d565b5b81516104508482602086016103eb565b91505092915050565b5f819050919050565b61046b81610459565b8114610475575f5ffd5b50565b5f8151905061048681610462565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6104b58261048c565b9050919050565b6104c5816104ab565b81146104cf575f5ffd5b50565b5f815190506104e0816104bc565b92915050565b5f5f5f5f608085870312156104fe576104fd610315565b5b5f85015167ffffffffffffffff81111561051b5761051a610319565b5b6105278782880161042c565b945050602085015167ffffffffffffffff81111561054857610547610319565b5b6105548782880161042c565b935050604061056587828801610478565b9250506060610576878288016104d2565b91505092959194509250565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806105d057607f821691505b6020821081036105e3576105e261058c565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026106457fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261060a565b61064f868361060a565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61068a61068561068084610459565b610667565b610459565b9050919050565b5f819050919050565b6106a383610670565b6106b76106af82610691565b848454610616565b825550505050565b5f5f905090565b6106ce6106bf565b6106d981848461069a565b505050565b5b818110156106fc576106f15f826106c6565b6001810190506106df565b5050565b601f82111561074157610712816105e9565b61071b846105fb565b8101602085101561072a578190505b61073e610736856105fb565b8301826106de565b50505b505050565b5f82821c905092915050565b5f6107615f1984600802610746565b1980831691505092915050565b5f6107798383610752565b9150826002028217905092915050565b61079282610582565b67ffffffffffffffff8111156107ab576107aa610335565b5b6107b582546105b9565b6107c0828285610700565b5f60209050601f8311600181146107f1575f84156107df578287015190505b6107e9858261076e565b865550610850565b601f1984166107ff866105e9565b5f5b8281101561082657848901518255600182019150602085019450602081019050610801565b86831015610843578489015161083f601f891682610752565b8355505b6001600288020188555050505b505050505050565b610861816104ab565b82525050565b5f60208201905061087a5f830184610858565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6108b782610459565b91506108c283610459565b92508282019050808211156108da576108d9610880565b5b92915050565b6108e981610459565b82525050565b5f6060820190506109025f830186610858565b61090f60208301856108e0565b61091c60408301846108e0565b949350505050565b5f6020820190506109375f8301846108e0565b92915050565b610de28061094a5f395ff3fe608060405234801561000f575f5ffd5b5060043610610091575f3560e01c8063313ce56711610064578063313ce5671461013157806370a082311461014f57806395d89b411461017f578063a9059cbb1461019d578063dd62ed3e146101cd57610091565b806306fdde0314610095578063095ea7b3146100b357806318160ddd146100e357806323b872dd14610101575b5f5ffd5b61009d6101fd565b6040516100aa9190610a5b565b60405180910390f35b6100cd60048036038101906100c89190610b0c565b61028d565b6040516100da9190610b64565b60405180910390f35b6100eb6102af565b6040516100f89190610b8c565b60405180910390f35b61011b60048036038101906101169190610ba5565b6102b8565b6040516101289190610b64565b60405180910390f35b6101396102e6565b6040516101469190610c10565b60405180910390f35b61016960048036038101906101649190610c29565b6102ee565b6040516101769190610b8c565b60405180910390f35b610187610333565b6040516101949190610a5b565b60405180910390f35b6101b760048036038101906101b29190610b0c565b6103c3565b6040516101c49190610b64565b60405180910390f35b6101e760048036038101906101e29190610c54565b6103e5565b6040516101f49190610b8c565b60405180910390f35b60606003805461020c90610cbf565b80601f016020809104026020016040519081016040528092919081815260200182805461023890610cbf565b80156102835780601f1061025a57610100808354040283529160200191610283565b820191905f5260205f20905b81548152906001019060200180831161026657829003601f168201915b5050505050905090565b5f5f610297610467565b90506102a481858561046e565b600191505092915050565b5f600254905090565b5f5f6102c2610467565b90506102cf858285610480565b6102da858585610513565b60019150509392505050565b5f6012905090565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60606004805461034290610cbf565b80601f016020809104026020016040519081016040528092919081815260200182805461036e90610cbf565b80156103b95780601f10610390576101008083540402835291602001916103b9565b820191905f5260205f20905b81548152906001019060200180831161039c57829003601f168201915b5050505050905090565b5f5f6103cd610467565b90506103da818585610513565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f33905090565b61047b8383836001610603565b505050565b5f61048b84846103e5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561050d57818110156104fe578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016104f593929190610cfe565b60405180910390fd5b61050c84848484035f610603565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610583575f6040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161057a9190610d33565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105f3575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016105ea9190610d33565b60405180910390fd5b6105fe8383836107d2565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610673575f6040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161066a9190610d33565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106e3575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016106da9190610d33565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555080156107cc578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516107c39190610b8c565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610822578060025f8282546108169190610d79565b925050819055506108f0565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156108ab578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016108a293929190610cfe565b60405180910390fd5b8181035f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610937578060025f8282540392505081905550610981565b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516109de9190610b8c565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610a2d826109eb565b610a3781856109f5565b9350610a47818560208601610a05565b610a5081610a13565b840191505092915050565b5f6020820190508181035f830152610a738184610a23565b905092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610aa882610a7f565b9050919050565b610ab881610a9e565b8114610ac2575f5ffd5b50565b5f81359050610ad381610aaf565b92915050565b5f819050919050565b610aeb81610ad9565b8114610af5575f5ffd5b50565b5f81359050610b0681610ae2565b92915050565b5f5f60408385031215610b2257610b21610a7b565b5b5f610b2f85828601610ac5565b9250506020610b4085828601610af8565b9150509250929050565b5f8115159050919050565b610b5e81610b4a565b82525050565b5f602082019050610b775f830184610b55565b92915050565b610b8681610ad9565b82525050565b5f602082019050610b9f5f830184610b7d565b92915050565b5f5f5f60608486031215610bbc57610bbb610a7b565b5b5f610bc986828701610ac5565b9350506020610bda86828701610ac5565b9250506040610beb86828701610af8565b9150509250925092565b5f60ff82169050919050565b610c0a81610bf5565b82525050565b5f602082019050610c235f830184610c01565b92915050565b5f60208284031215610c3e57610c3d610a7b565b5b5f610c4b84828501610ac5565b91505092915050565b5f5f60408385031215610c6a57610c69610a7b565b5b5f610c7785828601610ac5565b9250506020610c8885828601610ac5565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610cd657607f821691505b602082108103610ce957610ce8610c92565b5b50919050565b610cf881610a9e565b82525050565b5f606082019050610d115f830186610cef565b610d1e6020830185610b7d565b610d2b6040830184610b7d565b949350505050565b5f602082019050610d465f830184610cef565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610d8382610ad9565b9150610d8e83610ad9565b9250828201905080821115610da657610da5610d4c565b5b9291505056fea264697066735822122072045b77ba240b3340ae675b48886c0f6e97ed455207cc14cab2d229eec396bd64736f6c634300081e0033";

export const deployToken = async (tokenData: TokenData, userWallet: string): Promise<string> => {
  try {
    console.log('Starting token deployment...', tokenData);
    
    // Check if MetaMask is available
    if (typeof window.ethereum === 'undefined') {
      throw new Error('MetaMask is not installed. Please install MetaMask to continue.');
    }

    // Request account access if not already connected
    const accounts = await window.ethereum.request({ 
      method: 'eth_requestAccounts' 
    });
    
    if (!accounts || accounts.length === 0) {
      throw new Error('No accounts found. Please connect your MetaMask wallet.');
    }

    // Create provider and signer
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();
    
    console.log('Connected account:', await signer.getAddress());

    // Switch to Avalanche network first
    await switchToAvalanche();

    // Create contract factory with ABI and bytecode
    const contractFactory = new ethers.ContractFactory(
      ERC20_ABI,
      ERC20_BYTECODE,
      signer
    );
    // Use the raw initialSupply as in Remix
    const initialSupply = tokenData.initialSupply;
    // Log the deployment parameters for debugging
    console.log('Deploying with:', tokenData.name, tokenData.ticker, initialSupply, userWallet);
    const contract = await contractFactory.deploy(
      tokenData.name,
      tokenData.ticker,
      initialSupply, // Pass as integer, not 18 decimals
      userWallet, // Pass the owner address as required by the MemeToken constructor
      {
        gasLimit: 3000000, // Increased gas limit for safety
        gasPrice: ethers.parseUnits('25', 'gwei'),
      }
    );

    console.log('Deployment transaction sent:', contract.deploymentTransaction()?.hash);
    
    // Wait for deployment to be mined
    const deployedContract = await contract.waitForDeployment();
    const contractAddress = await deployedContract.getAddress();
    
    console.log('Contract deployed successfully at:', contractAddress);

    // Save token to database
    const { data: tokenRecord, error: dbError } = await supabase
      .from('tokens')
      .insert({
        name: tokenData.name,
        ticker: tokenData.ticker,
        token_type: tokenData.tokenType,
        initial_supply: tokenData.initialSupply.toString(),
        description: tokenData.description,
        image_url: tokenData.imageUrl,
        creator_wallet: userWallet,
        contract_address: contractAddress,
      })
      .select()
      .single();

    if (dbError) {
      console.error('Database error:', dbError);
      throw new Error(`Failed to save token to database: ${dbError.message}`);
    }

    console.log('Token saved to database:', tokenRecord);

    // Add notification for token creation
    await addNotification({
      type: 'token_created',
      title: 'Token Created Successfully!',
      message: `Your ${tokenData.tokenType} "${tokenData.name}" has been deployed to the blockchain.`,
      user_wallet: userWallet,
      token_name: tokenData.name,
      token_ticker: tokenData.ticker,
    });

    return contractAddress;
  } catch (error: any) {
    console.error('Token deployment failed:', error);
    
    // Handle specific MetaMask/Ethereum errors
    if (error.code === 4001) {
      throw new Error('Transaction was rejected by user.');
    } else if (error.code === -32002) {
      throw new Error('MetaMask is already processing a request. Please check MetaMask.');
    } else if (error.code === -32603) {
      throw new Error('Internal JSON-RPC error. Please try again or check your network connection.');
    } else if (error.message?.includes('insufficient funds')) {
      throw new Error('Insufficient funds to deploy the token. Please ensure you have enough AVAX for gas fees.');
    } else if (error.message?.includes('gas')) {
      throw new Error('Gas estimation failed. Please ensure you have enough AVAX and try again.');
    }
    
    // Re-throw with original message if no specific handling
    throw new Error(error.message || 'Failed to deploy token. Please try again.');
  }
};

export const switchToAvalanche = async (): Promise<boolean> => {
  try {
    if (typeof window.ethereum === 'undefined') {
      throw new Error('MetaMask is not installed');
    }

    // Avalanche Fuji Testnet configuration (for testing)
    const avalancheConfig = {
      chainId: '0xA869', // 43113 in hex (Fuji Testnet)
      chainName: 'Avalanche Fuji Testnet',
      rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],
      nativeCurrency: {
        name: 'AVAX',
        symbol: 'AVAX',
        decimals: 18,
      },
      blockExplorerUrls: ['https://testnet.snowtrace.io/'],
    };

    try {
      // Try to switch to Avalanche
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: avalancheConfig.chainId }],
      });
      return true;
    } catch (switchError: any) {
      // If the chain hasn't been added to MetaMask, add it
      if (switchError.code === 4902) {
        await window.ethereum.request({
          method: 'wallet_addEthereumChain',
          params: [avalancheConfig],
        });
        return true;
      }
      throw switchError;
    }
  } catch (error) {
    console.error('Failed to switch to Avalanche network:', error);
    return false;
  }
};
